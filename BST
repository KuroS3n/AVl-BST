#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct item {
    int id;
    char nama[50];
    int jumlah;
};

struct node {
    struct item item;
    struct node *right;
    struct node *left;
};

struct node *root = NULL;

// Buat node baru
struct node *createNode(struct item item) {
    struct node *newNode = (struct node *)malloc(sizeof(struct node));
    newNode->item = item;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Insert
struct node *insertBST(struct node *node, struct item item) {
    if (node == NULL) {
        return createNode(item);
    }
    if (item.id == node->item.id) {
        printf("Barang dengan ID: %d sudah ada di gudang\n", item.id);
    } else if (item.id < node->item.id) {
        node->left = insertBST(node->left, item);
    } else {
        node->right = insertBST(node->right, item);
    }
    return node;
}

void insertItem(int id, char nama[], int jumlah) {
    struct item item;
    item.id = id;
    strcpy(item.nama, nama);
    item.jumlah = jumlah;
    root = insertBST(root, item);
    printf("Barang Berhasil Ditambahkan\n");
    printf("ID: %d, Nama: %s, Jumlah: %d\n", id, nama, jumlah);
}

// Mencari item dengan id
struct node *searchBST(struct node *node, int id) {
    if (node == NULL || node->item.id == id) {
        return node;
    }
    if (id < node->item.id) {
        return searchBST(node->left, id);
    }
    return searchBST(node->right, id);
}

void searchItem(int id) {
    struct node *node = searchBST(root, id);
    if (node != NULL) {
        printf("Barang ditemukan\n");
        printf("ID: %d, Nama: %s, Jumlah: %d\n", node->item.id, node->item.nama, node->item.jumlah);
    } else {
        printf("Barang dengan ID: %d tidak ditemukan\n", id);
    }
}

//Display in-order
void displayItem(struct node *node) {
    if (node == NULL) {
        return;
    }
    displayItem(node->left);
    printf("ID: %d, Nama: %s, Jumlah: %d\n", node->item.id, node->item.nama, node->item.jumlah);
    displayItem(node->right);
}

// Update item
void updateItem(int id, char nama[], int jumlah) {
    struct node *node = searchBST(root, id);
    if (node != NULL) {
        printf("Sebelum di Update\n");
        printf("ID: %d, Nama: %s, Jumlah: %d\n", node->item.id, node->item.nama, node->item.jumlah);
        node->item.id = id;
        strcpy(node->item.nama, nama);
        node->item.jumlah = jumlah;
        printf("Sesudah di Update\n");
        printf("ID: %d, Nama: %s, Jumlah: %d\n", node->item.id, node->item.nama, node->item.jumlah);
    } else {
        printf("Barang dengan ID: %d tidak ditemukan\n", id);
    }
}

// Minimum value
struct node *findMin(struct node *node) {
    while (node->left != NULL) {
        node = node->left;
    }
    return node;
}

// Delete
struct node *deleteBST(struct node *node, int id) {
    if (node == NULL) {
        printf("Barang dengan ID: %d tidak ditemukan\n", id);
        return node;
    } else if (id < node->item.id) {
        node->left = deleteBST(node->left, id);
    } else if (id > node->item.id) {
        node->right = deleteBST(node->right, id);
    } else {
        if (node->left == NULL) {
            struct node *temp = node->right;
            free(node);
            return temp;
        } else if (node->right == NULL) {
            struct node *temp = node->left;
            free(node);
            return temp;
        }
        struct node *temp = findMin(node->right);
        node->item = temp->item;
        node->right = deleteBST(node->right, temp->item.id);
        printf("Barang dengan ID: %d berhasil dihapus\n", id);
    }
    return node;
}


void deleteItem(int id) {
    root = deleteBST(root, id);
}

// Display menu
int main() {
    int choice, id, jumlah;
    char nama[50];

    while (1) {
        printf("\nMenu:\n");
        printf("1. Input Barang\n");
        printf("2. Update Barang\n");
        printf("3. Delete Barang\n");
        printf("4. Display Barang\n");
        printf("5. Cari Barang\n");
        printf("6. Exit\n");
        printf("Pilihan: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Masukkan ID Barang: ");
                scanf("%d", &id);
                getchar();
                printf("Masukkan Nama Barang: ");
                fgets(nama, sizeof(nama), stdin);
                nama[strcspn(nama, "\n")] = '\0';
                printf("Masukkan Jumlah Barang: ");
                scanf("%d", &jumlah);
                insertItem(id, nama, jumlah);
                break;

            case 2:
                printf("Masukkan ID Barang: ");
                scanf("%d", &id);
                getchar();
                printf("Masukkan Nama Barang: ");
                fgets(nama, sizeof(nama), stdin);
                nama[strcspn(nama, "\n")] = '\0';
                printf("Masukkan Jumlah Barang: ");
                scanf("%d", &jumlah);
                updateItem(id, nama, jumlah);
                break;

            case 3:
                printf("Masukkan ID Barang: ");
                scanf("%d", &id);
                deleteItem(id);
                break;

            case 4:
                printf("Barang di warehouse:\n");
                displayItem(root);
                break;

            case 5:
                printf("Masukkan ID Barang: ");
                scanf("%d", &id);
                searchItem(id);
                break;

            case 6:
                printf("Keluar\n");
                exit(0);

            default:
                printf("Pilihan tidak valid\n");
        }
    }

    return 0;
}
