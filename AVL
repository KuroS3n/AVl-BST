#include <stdio.h>
#include <stdlib.h>
#include <string.h>

	typedef struct Node {
		char title[101];
		struct Node *left;
		struct Node *right;
		int height;
	} Node;
	int height(Node *N){
		if (N == NULL)
        	return 0;
   		 return N->height;
	}
	Node *newNode(char title[]){
		Node* node = (Node*)malloc(sizeof(Node));
		strcpy(node->title, title);
		node->left = NULL;
		node->right = NULL;
		node->height = 1;
		return node;
	}
	Node *rightRotate(Node *x){
		Node *y = x->right;
		Node *T2 = y->left;
		y->left = x;
		x->right = T2;
		x->height = max(height(x->left), height(x->right)) + 1;
		y->height = max(height(y->left), height(y->right)) + 1;
		return x;
	}
	int max(int a, int b) {
    	return (a > b) ? a : b;
	}
	Node *leftRotate(Node *x){
		Node *y = x->right;
		Node *T2 = y->left;
		y->left = x;
		x->right = T2;
		x->height = max(height(x->left), height(x->right)) + 1;
		y->height = max(height(y->left), height(y->right)) + 1;
		return y;
	}
	int getBalance(Node *N){
		if (N == NULL)
			return 0;
		return height(N->left) - height(N->right);
	}
	struct Node* insert( Node* node, char title[]) {
   		 if (node == NULL)
       		 return(newNode(title));
  		 if (strcmp(title, node->title) < 0)
       		 node->left = insert(node->left, title);
   		 else if (strcmp(title, node->title) > 0)
        	node->right = insert(node->right, title);
   		 else 
       		 return node;
    	node->height = 1 + max(height(node->left), height(node->right));
    	int balance = getBalance(node);
    	if (balance > 1 && strcmp(title, node->left->title) < 0)
        	return rightRotate(node);
   		if (balance > 1 && strcmp(title, node->left->title) > 0) {
        	node->left = leftRotate(node->left);
       		return rightRotate(node);
   		 	}
   		if (balance < -1 && strcmp(title, node->right->title) > 0)
        	return leftRotate(node);
    	if (balance < -1 && strcmp(title, node->right->title) < 0) {
        	node->right = rightRotate(node->right);
       		return leftRotate(node);
   		 }
   		 return node;
	}
	Node* minValueNode(Node* node) {
   		 Node* current = node;
    	while (current->left != NULL)
        	current = current->left;
    	return current;
	}
	 Node* deleteNode(Node* root, char title[]) {
    	if (root == NULL)
        	return root;
    	if (strcmp(title, root->title) < 0)
        	root->left = deleteNode(root->left, title);
    	else if (strcmp(title, root->title) > 0)
        	root->right = deleteNode(root->right, title);
    	else {      
        	if ((root->left == NULL) || (root->right == NULL)) {
            	 Node *temp = root->left ? root->left : root->right;
            	if (temp == NULL) {
            	    temp = root;
            	    root = NULL;
            	} else 
                	*root = *temp;
            	free(temp);
        	} else {
            	Node* temp = minValueNode(root->right);
            	strcpy(root->title, temp->title);
            	root->right = deleteNode(root->right, temp->title);
        	}
    	}
    	if (root == NULL)
        	return root;
    	root->height = 1 + max(height(root->left), height(root->right));
    	int balance = getBalance(root);
    	if (balance > 1 && getBalance(root->left) >= 0)
        	return rightRotate(root);
    	if (balance > 1 && getBalance(root->left) < 0) {
        	root->left = leftRotate(root->left);
        	return rightRotate(root);
    	}
    	if (balance < -1 && getBalance(root->right) <= 0)
        	return leftRotate(root);
    	if (balance < -1 && getBalance(root->right) > 0) {
        	root->right = rightRotate(root->right);
        	return leftRotate(root);
    	}
    	return root;
	}
	void preOrder(Node *root){
		if(root != NULL) {
        	printf("%s\n", root->title);
        	preOrder(root->left);
        	preOrder(root->right);
    	}
	}
	
int main(){	
	Node *root = NULL;
	int choice = NULL;
	char title[101];
	
	p:
		printf("--------------------------");
		printf("\n1. Insert Book           |\n2. Delete Book           |\n3. Display Book List     |\n4. Exit                  |\n");
		printf("--------------------------\n");
		printf("Please enter your choice : ");
		scanf("%d", &choice);
		getchar();
		
		if (choice == 1){
			printf("\nEnter the book name : ");
			scanf("%[^\n]", title);
			root = insert(root, title);
			printf("\nSuccesfully Inserted!\n\n");
			goto p;
		} else if (choice == 2){
			printf("\nEnter the title of the book to delete : ");
			scanf("%[^\n]", title);
			root = deleteNode(root, title);
			printf("\nSuccesfully Deleted!\n\n");
			goto p;
		} else if (choice == 3){
			printf("\n##########################\n");
			printf("\nBook List :\n\n");
			preOrder(root);
			printf("\n");
			printf("##########################\n\n");
			goto p;
		} else if (choice == 4){
			goto exit;
		} else {
			goto p;
		}
	exit:
		printf("\nYou've exited.\n");
	return 0;
}
